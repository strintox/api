import asyncio
import json
import logging
import base64
import io
import time
import os
import subprocess
import sys
import signal
from typing import Dict, Any, Optional, List

import requests
import telegram
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler, ConversationHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –±–æ–ª–µ–µ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ
logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.INFO,
    datefmt='%H:%M:%S'
)
# –û—Ç–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("telegram").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞
def kill_other_instances():
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ –¥—Ä—É–≥–∏–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞"""
    try:
        current_pid = os.getpid()
        
        if sys.platform == "win32":
            # –î–ª—è Windows –∏—Å–ø–æ–ª—å–∑—É–µ–º taskkill –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            try:
                subprocess.call(
                    "taskkill /f /fi \"IMAGENAME eq python.exe\" /fi \"PID ne " + str(current_pid) + "\"",
                    shell=True,
                    stdout=subprocess.DEVNULL,
                    stderr=subprocess.DEVNULL
                )
                logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω—ã –≤—Å–µ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã Python")
            except Exception as e:
                logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥—Ä—É–≥–∏—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤: {e}")
        else:
            # –î–ª—è Linux/Unix
            output = subprocess.check_output(["ps", "aux"], text=True)
            for line in output.split('\n'):
                if "python" in line and "main.py" in line:
                    parts = line.split()
                    if len(parts) > 1:
                        try:
                            pid = int(parts[1])
                            if pid != current_pid:
                                os.kill(pid, signal.SIGKILL)  # SIGKILL –≤–º–µ—Å—Ç–æ SIGTERM
                                logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (PID: {pid})")
                        except Exception as e:
                            pass
    
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã: {e}")

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
LANGDOCK_API_URL = "https://api.langdock.com/anthropic/eu/v1/messages"
LANGDOCK_API_KEY = "sk-0jcTr8heQyZCN86IjIifju1usdBUUp5tBFpmqP5t6D8VusoffpIjNZF6EXo9ZT1R57r2kpmMwpOp46LhqYxpjQ"
TELEGRAM_BOT_TOKEN = "7613213498:AAGmpv4EEt2e5qDzxCx-Jp8IZjPMy1ktkao"

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 8199808170

# –õ–∏–º–∏—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
MAX_REQUESTS = 30  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
TIME_WINDOW = 10 * 60 * 60  # 10 —á–∞—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
conversation_history: Dict[int, List[Dict[str, Any]]] = {}

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests: Dict[int, List[float]] = {}  # user_id -> —Å–ø–∏—Å–æ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –∑–∞–ø—Ä–æ—Å–æ–≤
user_blocked: Dict[int, bool] = {}  # user_id -> —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
user_custom_limits: Dict[int, int] = {}  # user_id -> –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states: Dict[int, str] = {}  # user_id -> —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (chat, photo_mode, etc.)
waiting_for_photo: Dict[int, bool] = {}  # user_id -> –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
USER_REQUESTS_FILE = "user_requests.json"
USER_BLOCKED_FILE = "user_blocked.json"
USER_CUSTOM_LIMITS_FILE = "user_custom_limits.json"

# –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
last_save_time = 0

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start."""
    user_id = update.effective_user.id
    conversation_history[user_id] = []
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_requests:
        user_requests[user_id] = []
    if user_id not in user_blocked:
        user_blocked[user_id] = False
    
    # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    welcome_message = (
        "üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Claude AI Bot!* üåü\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–∞ –±–∞–∑–µ Claude 3.7 Sonnet - "
        "–æ–¥–Ω–æ–π –∏–∑ —Å–∞–º—ã—Ö –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.\n\n"
        f"*–õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤:* {MAX_REQUESTS} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫–∞–∂–¥—ã–µ 10 —á–∞—Å–æ–≤\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["üí¨ –ù–æ–≤—ã–π —á–∞—Ç", "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ"],
        ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if user_id == ADMIN_ID:
        keyboard.append(["üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(welcome_message, parse_mode='Markdown', reply_markup=reply_markup)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞."""
    user_id = update.effective_user.id
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_message = (
        "ü§ñ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é Claude AI Bot*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
    )
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –æ–±—ã—á–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = [
        ["üí¨ –ù–æ–≤—ã–π —á–∞—Ç", "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ"],
        ["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "‚ÑπÔ∏è –û –±–æ—Ç–µ"],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω
    if user_id == ADMIN_ID:
        keyboard.append(["üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(menu_message, parse_mode='Markdown', reply_markup=reply_markup)

async def button_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if user_id in user_blocked and user_blocked[user_id] and user_id != ADMIN_ID:
        await query.message.reply_text(
            "‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        return
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
    if query.data == "main_menu":
        await main_menu(update, context)
        return
    
    elif query.data == "new_chat":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        conversation_history[user_id] = []
        user_states[user_id] = "chat"
        waiting_for_photo[user_id] = False
        
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "üí¨ *–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º.\n"
            "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == "photo_mode":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
        user_states[user_id] = "photo_mode"
        waiting_for_photo[user_id] = True
        
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "üì∏ *–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == "reset":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_history[user_id] = []
        
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "‚ôªÔ∏è *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞*\n\n"
            "–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == "about":
        about_text = (
            "*–û –±–æ—Ç–µ Claude AI*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Claude 3.7 Sonnet –æ—Ç Anthropic.\n\n"
            "Claude 3.7 - —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è –ø–æ–Ω–∏–º–∞—Ç—å –∏ "
            "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ª–∏—á–∞—é—â–∞—è—Å—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ "
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
            "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —Å—Ç–∏—Ö–∏, –∫–æ–¥ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(about_text, parse_mode='Markdown', reply_markup=reply_markup)
    
    elif query.data == "profile":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = query.from_user
        username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        name = user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits_info = get_remaining_requests(user_id)
        
        if user_id == ADMIN_ID:
            status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            requests_info = "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (‚àû)"
        else:
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
            reset_time_str = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            if limits_info["reset_time"]:
                hours, remainder = divmod(int(limits_info["reset_time"]), 3600)
                minutes, seconds = divmod(remainder, 60)
                reset_time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
            
            requests_info = f"{limits_info['remaining']} –∏–∑ {limits_info['total']} (—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ {reset_time_str})"
        
        message = (
            "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üîñ Username: @{username}\n"
            f"üõÇ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {requests_info}\n"
            f"üîÑ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {time.strftime('%d.%m.%Y', time.localtime())}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = [
            [InlineKeyboardButton("‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞", callback_data="reset")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    # –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    elif query.data == "admin_panel":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [InlineKeyboardButton("üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="admin_users")],
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton("üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", callback_data="admin_block_menu")],
            [InlineKeyboardButton("üìä –õ–∏–º–∏—Ç—ã", callback_data="admin_limits_menu")],
            [InlineKeyboardButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="admin_save")],
            [InlineKeyboardButton("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    elif query.data == "admin_users":
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = len(set(conversation_history.keys()) | set(user_requests.keys()))
        blocked_users = sum(1 for is_blocked in user_blocked.values() if is_blocked)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        total_requests = sum(len(timestamps) for timestamps in user_requests.values())
        
        message = (
            "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users}\n"
            f"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    elif query.data == "admin_search_user":
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_states[user_id] = "admin_waiting_user_id"
        
        message = (
            "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    elif query.data == "admin_block_menu":
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        message = (
            "üö´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏*\n\n"
            "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ ID."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    elif query.data == "admin_limits_menu":
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        message = (
            "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏*\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ ID."
        )
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="admin_search_user")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    elif query.data == "admin_save":
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        save_user_data()
        
        message = "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
        
        keyboard = [
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", callback_data="admin_panel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.message.edit_text(message, reply_markup=reply_markup)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    elif query.data.startswith("admin_toggle_block_"):
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.split("_")[-1])
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            current_status = user_blocked.get(target_user_id, False)
            user_blocked[target_user_id] = not current_status
            
            new_status = "–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚õîÔ∏è" if user_blocked[target_user_id] else "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ"
            
            await show_user_info(update, context, target_user_id)
            
            await query.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ {new_status}."
            )
        except ValueError:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    elif query.data.startswith("admin_add_10_"):
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.split("_")[-1])
            
            # –î–æ–±–∞–≤–ª—è–µ–º 10 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ª–∏–º–∏—Ç—É
            current_limit = user_custom_limits.get(target_user_id, MAX_REQUESTS)
            user_custom_limits[target_user_id] = current_limit + 10
            
            await show_user_info(update, context, target_user_id)
            
            await query.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {user_custom_limits[target_user_id]} –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
        except ValueError:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    elif query.data.startswith("admin_add_30_"):
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.split("_")[-1])
            
            # –î–æ–±–∞–≤–ª—è–µ–º 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ª–∏–º–∏—Ç—É
            current_limit = user_custom_limits.get(target_user_id, MAX_REQUESTS)
            user_custom_limits[target_user_id] = current_limit + 30
            
            await show_user_info(update, context, target_user_id)
            
            await query.message.reply_text(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ 30 –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {user_custom_limits[target_user_id]} –∑–∞–ø—Ä–æ—Å–æ–≤."
            )
        except ValueError:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
    
    elif query.data.startswith("admin_reset_history_"):
        if user_id != ADMIN_ID:
            await query.message.edit_text("‚õîÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", 
                                         reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]))
            return
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ callback_data
            target_user_id = int(query.data.split("_")[-1])
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            if target_user_id in conversation_history:
                conversation_history[target_user_id] = []
            
            await show_user_info(update, context, target_user_id)
            
            await query.message.reply_text(
                f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞."
            )
        except ValueError:
            await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

async def show_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE, target_user_id: int) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."""
    user_id = update.effective_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id != ADMIN_ID:
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            reply_markup=reply_markup
        )
        return
    
    # –ì–æ—Ç–æ–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    is_in_history = target_user_id in conversation_history
    is_in_requests = target_user_id in user_requests
    
    if not is_in_history and not is_in_requests:
        keyboard = [["üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"], ["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=reply_markup
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö
    user_limit = user_custom_limits.get(target_user_id, MAX_REQUESTS)
    is_blocked = user_blocked.get(target_user_id, False)
    
    # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
    requests_count = len(user_requests.get(target_user_id, []))
    
    message = (
        f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ ID: {target_user_id}*\n\n"
        f"üõÇ –°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω üö´' if is_blocked else '–ê–∫—Ç–∏–≤–µ–Ω ‚úÖ'}\n"
        f"üìä –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {user_limit}\n"
        f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {requests_count}\n"
        f"üîÑ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤: {'–ï—Å—Ç—å' if is_in_history else '–ù–µ—Ç'}"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º
    context.user_data["target_user_id"] = target_user_id
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    if is_blocked:
        block_button = "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    else:
        block_button = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
    
    keyboard = [
        [block_button, "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã", "‚ûñ –°–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å—ã"],
        ["üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç", "üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_states[user_id] = "admin_viewing_user"

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –æ—Ç Claude."""
    global last_save_time
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    current_time = time.time()
    if current_time - last_save_time > 300:  # 5 –º–∏–Ω—É—Ç
        save_user_data()
        last_save_time = current_time
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if user_id in user_blocked and user_blocked[user_id] and user_id != ADMIN_ID:
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            "‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=reply_markup
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if update.message.text.startswith("/start"):
        await start(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin
    if update.message.text.startswith("/admin") and user_id == ADMIN_ID:
        # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
        keyboard = [
            ["üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
            ["üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "üìä –õ–∏–º–∏—Ç—ã"],
            ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu
    if update.message.text.startswith("/menu"):
        await main_menu(update, context)
        return
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
    if update.message.text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await main_menu(update, context)
        return
    elif update.message.text == "üí¨ –ù–æ–≤—ã–π —á–∞—Ç":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞
        conversation_history[user_id] = []
        user_states[user_id] = "chat"
        waiting_for_photo[user_id] = False
        
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üí¨ *–†–µ–∂–∏–º —á–∞—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω*\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º.\n"
            "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –æ—á–∏—â–µ–Ω–∞. –ù–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    elif update.message.text == "üì∏ –ê–Ω–∞–ª–∏–∑ —Ñ–æ—Ç–æ":
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ
        user_states[user_id] = "photo_mode"
        waiting_for_photo[user_id] = True
        
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "üì∏ *–†–µ–∂–∏–º –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π*\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é, –∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–∞.",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    elif update.message.text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user = update.effective_user
        username = user.username or "–ù–µ —É–∫–∞–∑–∞–Ω"
        name = user.full_name or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏–º–∏—Ç–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        limits_info = get_remaining_requests(user_id)
        
        if user_id == ADMIN_ID:
            status = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä"
            requests_info = "–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ (‚àû)"
        else:
            status = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
            reset_time_str = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
            if limits_info["reset_time"]:
                hours, remainder = divmod(int(limits_info["reset_time"]), 3600)
                minutes, seconds = divmod(remainder, 60)
                reset_time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
            
            requests_info = f"{limits_info['remaining']} –∏–∑ {limits_info['total']} (—Å–±—Ä–æ—Å —á–µ—Ä–µ–∑ {reset_time_str})"
        
        message = (
            "üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
            f"üÜî ID: `{user_id}`\n"
            f"üë§ –ò–º—è: {name}\n"
            f"üîñ Username: @{username}\n"
            f"üõÇ –°—Ç–∞—Ç—É—Å: {status}\n"
            f"üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {requests_info}\n"
            f"üîÑ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {time.strftime('%d.%m.%Y', time.localtime())}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è
        keyboard = [
            ["‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"],
            ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
        return
    elif update.message.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ":
        about_text = (
            "*–û –±–æ—Ç–µ Claude AI*\n\n"
            "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏ Claude 3.7 Sonnet –æ—Ç Anthropic.\n\n"
            "Claude 3.7 - —ç—Ç–æ –ø–µ—Ä–µ–¥–æ–≤–∞—è –º–æ–¥–µ–ª—å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞, —Å–ø–æ—Å–æ–±–Ω–∞—è –ø–æ–Ω–∏–º–∞—Ç—å –∏ "
            "–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ—Ç–ª–∏—á–∞—é—â–∞—è—Å—è –≤—ã—Å–æ–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é –∏ "
            "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –æ—Ç–≤–µ—Ç–æ–≤.\n\n"
            "*–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ª—é–±–æ–π —Ç–µ–º–µ\n"
            "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –±–µ—Å–µ–¥—ã\n"
            "‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã, —Å—Ç–∏—Ö–∏, –∫–æ–¥ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ"
        )
        
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(about_text, parse_mode='Markdown', reply_markup=reply_markup)
        return
    elif update.message.text == "‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞":
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        conversation_history[user_id] = []
        
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ôªÔ∏è *–ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞*\n\n"
            "–í—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã. –ú–æ–∂–µ–º –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    elif user_id == ADMIN_ID and user_id in user_states and user_states[user_id] == "admin_waiting_user_id":
        try:
            target_user_id = int(update.message.text.strip())
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[user_id] = ""
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await show_user_info(update, context, target_user_id)
        except ValueError:
            keyboard = [["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
                reply_markup=reply_markup
            )
        return
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    elif user_id == ADMIN_ID:
        if update.message.text == "üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard = [
                ["üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
                ["üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "üìä –õ–∏–º–∏—Ç—ã"],
                ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            return
        elif update.message.text == "üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π":
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            total_users = len(set(conversation_history.keys()) | set(user_requests.keys()))
            blocked_users = sum(1 for is_blocked in user_blocked.values() if is_blocked)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            total_requests = sum(len(timestamps) for timestamps in user_requests.values())
            
            message = (
                "üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π*\n\n"
                f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
                f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: {blocked_users}\n"
                f"üí¨ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {total_requests}\n\n"
            )
            
            keyboard = [
                ["üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
                ["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return
        elif update.message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_states[user_id] = "admin_waiting_user_id"
            
            message = (
                "üîç *–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è*\n\n"
                "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å."
            )
            
            keyboard = [
                ["üîô –ù–∞–∑–∞–¥ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"],
                ["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return
        elif update.message.text == "üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏":
            message = (
                "üö´ *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏*\n\n"
                "–î–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ ID."
            )
            
            keyboard = [
                ["üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
                ["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return
        elif update.message.text == "üìä –õ–∏–º–∏—Ç—ã":
            message = (
                "üìä *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞–º–∏*\n\n"
                "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–∏—Ç–µ –µ–≥–æ –ø–æ ID."
            )
            
            keyboard = [
                ["üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
                ["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
            return
        elif update.message.text == "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            save_user_data()
            
            message = "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."
            
            keyboard = [["üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(message, reply_markup=reply_markup)
            return
        elif update.message.text == "üîô –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            keyboard = [
                ["üë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"],
                ["üö´ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏", "üìä –õ–∏–º–∏—Ç—ã"],
                ["üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            
            await update.message.reply_text(
                "üëë *–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:",
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            return
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞–¥ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        elif user_states.get(user_id) == "admin_viewing_user" and "target_user_id" in context.user_data:
            target_user_id = context.user_data["target_user_id"]
            
            if update.message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_blocked[target_user_id] = True
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await show_user_info(update, context, target_user_id)
                return
            
            elif update.message.text == "üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å":
                # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user_blocked[target_user_id] = False
                
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user_id} —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await show_user_info(update, context, target_user_id)
                return
            
            elif update.message.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                if target_user_id in conversation_history:
                    conversation_history[target_user_id] = []
                
                await update.message.reply_text(
                    f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞."
                )
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                await show_user_info(update, context, target_user_id)
                return
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Å–Ω—è—Ç–∏—è/—É—Å—Ç–∞–Ω–æ–≤–∫–∏
            elif user_states.get(user_id) == "admin_adding_requests" and "target_user_id" in context.user_data:
                target_user_id = context.user_data["target_user_id"]
                
                if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                try:
                    requests_to_add = int(update.message.text.split()[0])
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
                    current_limit = user_custom_limits.get(target_user_id, MAX_REQUESTS)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
                    user_custom_limits[target_user_id] = current_limit + requests_to_add
                    
                    await update.message.reply_text(
                        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {requests_to_add} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                        f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {user_custom_limits[target_user_id]} –∑–∞–ø—Ä–æ—Å–æ–≤."
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                except (ValueError, IndexError):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                    )
                return
                
            elif user_states.get(user_id) == "admin_removing_requests" and "target_user_id" in context.user_data:
                target_user_id = context.user_data["target_user_id"]
                
                if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                try:
                    requests_to_remove = int(update.message.text.split()[0])
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ª–∏–º–∏—Ç
                    current_limit = user_custom_limits.get(target_user_id, MAX_REQUESTS)
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç, –Ω–æ –Ω–µ –º–µ–Ω—å—à–µ 1
                    new_limit = max(1, current_limit - requests_to_remove)
                    user_custom_limits[target_user_id] = new_limit
                    
                    await update.message.reply_text(
                        f"‚úÖ –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —Å–Ω—è—Ç–æ {requests_to_remove} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
                        f"–ù–æ–≤—ã–π –ª–∏–º–∏—Ç: {user_custom_limits[target_user_id]} –∑–∞–ø—Ä–æ—Å–æ–≤."
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                except (ValueError, IndexError):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                    )
                return
                
            elif user_states.get(user_id) == "admin_setting_limit" and "target_user_id" in context.user_data:
                target_user_id = context.user_data["target_user_id"]
                
                if update.message.text == "üîô –û—Ç–º–µ–Ω–∞":
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                    return
                
                # –ü–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                try:
                    new_limit = int(update.message.text.split()[0])
                    
                    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç
                    user_custom_limits[target_user_id] = new_limit
                    
                    await update.message.reply_text(
                        f"‚úÖ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_limit} –∑–∞–ø—Ä–æ—Å–æ–≤."
                    )
                    
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    await show_user_info(update, context, target_user_id)
                except (ValueError, IndexError):
                    await update.message.reply_text(
                        "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ª–∏–º–∏—Ç–∞ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤."
                    )
                return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_limit(user_id):
        limits_info = get_remaining_requests(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
        reset_time_str = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        if limits_info["reset_time"]:
            hours, remainder = divmod(int(limits_info["reset_time"]), 3600)
            minutes, seconds = divmod(remainder, 60)
            reset_time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
        
        keyboard = [["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤*\n\n"
            f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ {limits_info['total']} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑: {reset_time_str}",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç
    if user_id in waiting_for_photo and waiting_for_photo[user_id]:
        keyboard = [
            ["üì∏ –û—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ç–æ", "üí¨ –ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞"],
            ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ÑπÔ∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ, –Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç.\n"
            "–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º —á–∞—Ç–∞ –∏–ª–∏ –æ—Å—Ç–∞—Ç—å—Å—è –≤ —Ä–µ–∂–∏–º–µ —Ñ–æ—Ç–æ?",
            reply_markup=reply_markup
        )
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in conversation_history:
        conversation_history[user_id] = []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —á–∞—Ç–∞, –µ—Å–ª–∏ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    if user_id not in user_states or not user_states[user_id]:
        user_states[user_id] = "chat"
    
    user_message = update.message.text
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {user_message}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        messages = []
        if len(conversation_history[user_id]) > 0:
            messages = conversation_history[user_id][-10:]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        messages.append({"role": "user", "content": user_message})
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Claude
        payload = {
            "model": "claude-3-7-sonnet-20250219",
            "messages": messages,
            "max_tokens": 4000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            "temperature": 0.7
        }
        
        headers = {
            "Content-Type": "application/json",
            "X-Api-Key": LANGDOCK_API_KEY,
            "anthropic-version": "2023-06-01"
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude API: {json.dumps(payload)}")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Claude
        response = requests.post(LANGDOCK_API_URL, json=payload, headers=headers)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response.status_code}")
        
        if response.status_code == 200:
            try:
                response_data = response.json()
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Claude
                if "content" in response_data and len(response_data["content"]) > 0:
                    claude_response = response_data["content"][0]["text"]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                    conversation_history[user_id].append({"role": "user", "content": user_message})
                    conversation_history[user_id].append({"role": "assistant", "content": claude_response})
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ 5 –æ—Ç–≤–µ—Ç–æ–≤)
                    if len(conversation_history[user_id]) > 20:
                        conversation_history[user_id] = conversation_history[user_id][-20:]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if len(claude_response) > 4000:  # –¢–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ~4096 —Å–∏–º–≤–æ–ª–∞–º–∏
                        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                        chunks = [claude_response[i:i+4000] for i in range(0, len(claude_response), 4000)]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        keyboard = [
                            ["‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                        ]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        await update.message.reply_text(
                            f"{chunks[0]}\n\n(–ß–∞—Å—Ç—å 1/{len(chunks)})",
                            reply_markup=reply_markup
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                        for i, chunk in enumerate(chunks[1:], 2):
                            await update.message.reply_text(
                                f"{chunk}\n\n(–ß–∞—Å—Ç—å {i}/{len(chunks)})"
                            )
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫ –æ—Ç–≤–µ—Ç—É
                        keyboard = [
                            ["‚ôªÔ∏è –°–±—Ä–æ—Å–∏—Ç—å —á–∞—Ç", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                        ]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        await update.message.reply_text(claude_response, reply_markup=reply_markup)
                else:
                    claude_response = "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(claude_response, reply_markup=reply_markup)
            except json.JSONDecodeError:
                claude_response = "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(claude_response, reply_markup=reply_markup)
        else:
            claude_response = f"–û—à–∏–±–∫–∞ API: {response.status_code}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(claude_response, reply_markup=reply_markup)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_requests(user_id)
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=reply_markup
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    global last_save_time
    user_id = update.effective_user.id
    
    # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    current_time = time.time()
    if current_time - last_save_time > 300:  # 5 –º–∏–Ω—É—Ç
        save_user_data()
        last_save_time = current_time
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
    if user_id in user_blocked and user_blocked[user_id] and user_id != ADMIN_ID:
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚õîÔ∏è –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.",
            reply_markup=reply_markup
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not check_user_limit(user_id):
        limits_info = get_remaining_requests(user_id)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞
        reset_time_str = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
        if limits_info["reset_time"]:
            hours, remainder = divmod(int(limits_info["reset_time"]), 3600)
            minutes, seconds = divmod(remainder, 60)
            reset_time_str = f"{hours:02}:{minutes:02}:{seconds:02}"
        
        keyboard = [["üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"], ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            "‚ö†Ô∏è *–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤*\n\n"
            f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ {limits_info['total']} –∑–∞–ø—Ä–æ—Å–æ–≤.\n"
            f"–°–ª–µ–¥—É—é—â–∏–π —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ —á–µ—Ä–µ–∑: {reset_time_str}",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º —Ñ–æ—Ç–æ
    user_states[user_id] = "photo_mode"
    waiting_for_photo[user_id] = False
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if user_id not in conversation_history:
        conversation_history[user_id] = []
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_bytes = await photo_file.download_as_bytearray()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ
        caption = update.message.caption or "–ß—Ç–æ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏?"
        
        # –ö–æ–¥–∏—Ä—É–µ–º —Ñ–æ—Ç–æ –≤ base64
        image_base64 = base64.b64encode(photo_bytes).decode('utf-8')
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Claude —Å —Ñ–æ—Ç–æ
        payload = {
            "model": "claude-3-7-sonnet-20250219",
            "messages": [
                {
                    "role": "user", 
                    "content": [
                        {"type": "text", "text": caption},
                        {
                            "type": "image", 
                            "source": {
                                "type": "base64", 
                                "media_type": "image/jpeg", 
                                "data": image_base64
                            }
                        }
                    ]
                }
            ],
            "max_tokens": 4000,  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
            "temperature": 0.7
        }
        
        headers = {
            "Content-Type": "application/json",
            "X-Api-Key": LANGDOCK_API_KEY,
            "anthropic-version": "2023-06-01"
        }
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Claude API —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º")
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API Claude
        response = requests.post(LANGDOCK_API_URL, json=payload, headers=headers)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API: {response.status_code}")
        
        if response.status_code == 200:
            try:
                response_data = response.json()
                
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ Claude
                if "content" in response_data and len(response_data["content"]) > 0:
                    claude_response = response_data["content"][0]["text"]
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
                    user_msg = {"role": "user", "content": [{"type": "text", "text": caption}, {"type": "image", "source": "image_data"}]}
                    assistant_msg = {"role": "assistant", "content": claude_response}
                    
                    conversation_history[user_id].append(user_msg)
                    conversation_history[user_id].append(assistant_msg)
                    
                    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ 10 —Å–æ–æ–±—â–µ–Ω–∏–π (5 –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ 5 –æ—Ç–≤–µ—Ç–æ–≤)
                    if len(conversation_history[user_id]) > 20:
                        conversation_history[user_id] = conversation_history[user_id][-20:]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
                    if len(claude_response) > 4000:  # –¢–µ–ª–µ–≥—Ä–∞–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è ~4096 —Å–∏–º–≤–æ–ª–∞–º–∏
                        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
                        chunks = [claude_response[i:i+4000] for i in range(0, len(claude_response), 4000)]
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Å –∫–Ω–æ–ø–∫–∞–º–∏
                        keyboard = [
                            ["üì∏ –ï—â–µ —Ñ–æ—Ç–æ", "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞"],
                            ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                        ]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        await update.message.reply_text(
                            f"{chunks[0]}\n\n(–ß–∞—Å—Ç—å 1/{len(chunks)})",
                            reply_markup=reply_markup
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ —á–∞—Å—Ç–∏
                        for i, chunk in enumerate(chunks[1:], 2):
                            await update.message.reply_text(
                                f"{chunk}\n\n(–ß–∞—Å—Ç—å {i}/{len(chunks)})"
                            )
                    else:
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        keyboard = [
                            ["üì∏ –ï—â–µ —Ñ–æ—Ç–æ", "üí¨ –†–µ–∂–∏–º —á–∞—Ç–∞"],
                            ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
                        ]
                        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                        
                        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
                        await update.message.reply_text(claude_response, reply_markup=reply_markup)
                else:
                    claude_response = "–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                    keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                    await update.message.reply_text(claude_response, reply_markup=reply_markup)
            except json.JSONDecodeError:
                claude_response = "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
                reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
                await update.message.reply_text(claude_response, reply_markup=reply_markup)
        else:
            claude_response = f"–û—à–∏–±–∫–∞ API: {response.status_code}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
            await update.message.reply_text(claude_response, reply_markup=reply_markup)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_requests(user_id)
        
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}")
        keyboard = [["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        
        await update.message.reply_text(
            f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {str(e)}",
            reply_markup=reply_markup
        )

def check_user_limit(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Returns:
        bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        return True
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—Ä—É—á–Ω—É—é
    if user_id in user_blocked and user_blocked[user_id]:
        return False
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_requests:
        user_requests[user_id] = []
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = time.time()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ TIME_WINDOW
    user_requests[user_id] = [t for t in user_requests[user_id] if current_time - t < TIME_WINDOW]
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π)
    user_limit = user_custom_limits.get(user_id, MAX_REQUESTS)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏ –ª–∏–º–∏—Ç
    return len(user_requests[user_id]) < user_limit

def update_user_requests(user_id: int) -> None:
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å—á–µ—Ç—á–∏–∫."""
    if user_id not in user_requests:
        user_requests[user_id] = []
    
    user_requests[user_id].append(time.time())

def get_remaining_requests(user_id: int) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –∑–∞–ø—Ä–æ—Å–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏–º–µ–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø
    if user_id == ADMIN_ID:
        return {
            "remaining": "‚àû",
            "total": "‚àû",
            "reset_time": None
        }
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
    if user_id not in user_requests:
        user_requests[user_id] = []
    
    # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
    current_time = time.time()
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã —Å—Ç–∞—Ä—à–µ TIME_WINDOW
    user_requests[user_id] = [t for t in user_requests[user_id] if current_time - t < TIME_WINDOW]
    
    # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π)
    user_limit = user_custom_limits.get(user_id, MAX_REQUESTS)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–ø—Ä–æ—Å—ã
    used_requests = len(user_requests[user_id])
    remaining_requests = user_limit - used_requests
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è —Å–±—Ä–æ—Å–∞ (–≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ —Ä–∞–Ω–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ + TIME_WINDOW)
    reset_time = None
    if user_requests[user_id]:
        oldest_request = min(user_requests[user_id])
        reset_time = oldest_request + TIME_WINDOW - current_time
    
    return {
        "remaining": remaining_requests,
        "total": user_limit,
        "reset_time": reset_time
    }

def save_user_data() -> None:
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ —Ñ–∞–π–ª—ã."""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
        serializable_requests = {}
        for user_id, timestamps in user_requests.items():
            serializable_requests[str(user_id)] = timestamps
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with open(USER_REQUESTS_FILE, 'w', encoding='utf-8') as f:
            json.dump(serializable_requests, f)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        serializable_blocked = {}
        for user_id, is_blocked in user_blocked.items():
            serializable_blocked[str(user_id)] = is_blocked
        
        with open(USER_BLOCKED_FILE, 'w', encoding='utf-8') as f:
            json.dump(serializable_blocked, f)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        serializable_limits = {}
        for user_id, limit in user_custom_limits.items():
            serializable_limits[str(user_id)] = limit
        
        with open(USER_CUSTOM_LIMITS_FILE, 'w', encoding='utf-8') as f:
            json.dump(serializable_limits, f)
        
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

def load_user_data() -> None:
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏–∑ —Ñ–∞–π–ª–æ–≤."""
    global user_requests, user_blocked, user_custom_limits
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if os.path.exists(USER_REQUESTS_FILE):
            with open(USER_REQUESTS_FILE, 'r', encoding='utf-8') as f:
                serializable_requests = json.load(f)
                
                for user_id_str, timestamps in serializable_requests.items():
                    user_requests[int(user_id_str)] = timestamps
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if os.path.exists(USER_BLOCKED_FILE):
            with open(USER_BLOCKED_FILE, 'r', encoding='utf-8') as f:
                serializable_blocked = json.load(f)
                
                for user_id_str, is_blocked in serializable_blocked.items():
                    user_blocked[int(user_id_str)] = is_blocked
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã
        if os.path.exists(USER_CUSTOM_LIMITS_FILE):
            with open(USER_CUSTOM_LIMITS_FILE, 'r', encoding='utf-8') as f:
                serializable_limits = json.load(f)
                
                for user_id_str, limit in serializable_limits.items():
                    user_custom_limits[int(user_id_str)] = limit
        
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ–≤–∞—Ä–∏, –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        user_requests = {}
        user_blocked = {}
        user_custom_limits = {}

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    if isinstance(context.error, telegram.error.Conflict):
        logger.error("–ö–æ–Ω—Ñ–ª–∏–∫—Ç: –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤—Å–µ –µ—â–µ –∑–∞–ø—É—â–µ–Ω.")
        logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ Python...")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∂–µ—Å—Ç–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        os._exit(1)
    else:
        logger.error(f"–û—à–∏–±–∫–∞: {str(context.error)}")

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞."""
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
    logger.info("–ü–æ–∏—Å–∫ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞...")
    kill_other_instances()
    
    # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã
    time.sleep(1)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    load_user_data()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    global last_save_time
    last_save_time = time.time()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("menu", main_menu))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    application.add_handler(MessageHandler(filters.TEXT, handle_message))

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    application.add_error_handler(error_handler)

    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–æ –Ω–∞–∂–∞—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º Ctrl-C
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: %s", ADMIN_ID)
        print("=" * 50)
        print("   ü§ñ Claude AI Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!   ")
        print("=" * 50)
        application.run_polling(allowed_updates=Update.ALL_TYPES)
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã (Ctrl+C)")
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        logger.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
        save_user_data()
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.")

if __name__ == "__main__":
    main() 
